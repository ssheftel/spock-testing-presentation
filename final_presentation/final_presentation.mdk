[INCLUDE=presentation]
Title         : Spock
Sub Title     : Java Test Framework
Reveal Theme  : sky
Beamer Theme  : singapore

[TITLE]

# Content

[TOC]

# What is Spock

* testing and specification framework for java and groovy
  * unit tests
  * integration tests
* test are written in groovy
* provide convenience methods and dsl for:
  * mock/spy/stub
  * assertions
  * test setup & teardown
* compatible w/ java ecosystem
  * junit
  * spring
  * intelij & eclipse
  * sonarqube

## Why it's Cool

* first-class TDD idioms
  * e.g: `given:` `when:` `then:`
* expressive syntax
  * literals for list and maps
  * named parameters in constructor
  * DSL for wildcard matching, invocation count, assertions, & mocking
* readability
  * test are 1/3 - 1/2 length compared to pure java
* clean error and traces
* easy to add to project



## Drawbacks

* one more project dependency
* one more language developers must know
* groovy is less performant

~~ Notes
But ...
1. 95% of java is valid groovy
2. we use groovy as part of gradle
3. performance doesn't matter for tests
~~

## Spec Structure

``` java
import spock.lang.*
class MySpec extends Specification {

  @Collaborator
  SomeService someService = Mock()
  
  @Subject
  ClassToTest classToTest
  
  def "should inject collaborator into subject"() {
  
    given:
      someService.someMethod() >> "return value"
  
    when:
      classToTest.methodUnderTest()
  
    then:
      someService.getField() == "return value"
  }
}
```