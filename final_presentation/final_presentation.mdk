[INCLUDE=presentation]
Title         : Spock
Sub Title     : Java Test Framework
Reveal Theme  : sky
Beamer Theme  : singapore

[TITLE]

# Content

[TOC]

# What is Spock

* testing and specification framework for java and groovy
  * unit tests
  * integration tests
* test are written in groovy
* provide convenience methods and dsl for:
  * mock/spy/stub
  * assertions
  * test setup & teardown
* compatible w/ java ecosystem
  * junit
  * spring
  * intelij & eclipse
  * sonarqube

## Why it's Cool

* first-class TDD idioms
  * e.g: `given:` `when:` `then:`
* expressive syntax
  * literals for list and maps
  * named parameters in constructor
  * DSL for wildcard matching, invocation count, assertions, & mocking
* readability
  * test are 1/3 - 1/2 length compared to pure java
* clean error and traces
* easy to add to project



## Drawbacks

* one more project dependency
* one more language developers must know
* groovy is less performant

~~ Notes
But ...
1. 95% of java is valid groovy
2. we use groovy as part of gradle
3. performance doesn't matter for tests
~~

## Spec Structure

``` java
import spock.lang.*
class MySpec extends Specification {

  @Collaborator
  SomeService someService = Mock()
  
  @Subject
  ClassToTest classToTest
  
  def "should inject collaborator into subject"() {
  
    given:
      someService.someMethod() >> "return value"
  
    when:
      classToTest.methodUnderTest()
  
    then:
      someService.getField() == "return value"
  }
}
```


## Themes {#themes}

Reveal.js comes with a few themes built in:

* [Default](?#/themes)
* [Sky](?theme=sky#/themes)
* [Beige](?theme=beige#/themes)
* [Serif](?theme=serif#/themes)
* [Simple](?theme=simple#/themes)
* [Night](?theme=night#/themes)
* [Moon](?theme=moon#/themes)
* [Solarized](?theme=solarized#/themes)

Theme demos are loaded after the presentation which leads to flicker. In
production you should load your theme in the `<head>` using a
`<link>`.

## Transitions { #transitions }

You can select from different transitions, like:\
[Cube](?transition=cube#/transitions) -
[Page](?transition=page#/transitions) -
[Concave](?transition=concave#/transitions) -
[Zoom](?transition=zoom#/transitions) -
[Linear](?transition=linear#/transitions) -
[Fade](?transition=fade#/transitions) -
[None](?transition=none#/transitions) -
[Default](?#/transitions)



## Pauses?

Some pauses.

* {.fragment} One
* {.fragment} Two
* {.fragment} Three

And more:

- Test 1
- Test 2
- Test 3
{.fragmented}

Cool!.

~ Slide
A slide with no header
~


## Point of View

In Reveal.js Press **ESC** to enter the slide overview.

Hold down alt and click on any element to zoom in on it using 
 [zoom.js]. Alt + click anywhere to zoom back out.


[zoom.js]: http://lab.hakim.se/zoom-js


## Works in Mobile Safari

Try it out! You can swipe through the slides and pinch your way to the
overview.


## Printing

You can print a `revealjs` presentation nicely from the browser.

First give the `?print-pdf` or `?print-paper` query on your final
presentation (in the browser address bar) and then print from the Chrome
browser selecting `Save to PDF`.

Read more about it at the [revealjs documentation](https://github.com/hakimel/reveal.js#pdf-export)

## RevealJS library

Normally, the `revealjs` library is loaded from a CDN but you can specify your
own url using metadata:

    Reveal Url: <my url>

This can be useful when using a [server to run revealjs](https://github.com/hakimel/reveal.js#full-setup)
where you may use something like:

    @nopreview Reveal Url: http://localhost:8000/reveal.js


## Thanks for looking :-)

[slide]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.html
[slide-mdk]: https://www.madoko.net/editor.html?#url=http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/slidedemo.mdk&options={"delayedUpdate":"true"}
[slide-pdf]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.pdf
